{"ast":null,"code":"import _objectSpread from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useEffect}from\"react\";import getSocket from\"../getSocket\";import{useHistory,useLocation}from\"react-router-dom\";import{useQueryClient}from\"react-query\";import useGetCurrentGuild from\"hooks/useGetCurrentGuild\";export default function useChannelSocket(guildId,key){var location=useLocation();var history=useHistory();var cache=useQueryClient();var guild=useGetCurrentGuild(guildId);useEffect(function(){var socket=getSocket();socket.emit(\"joinGuild\",guildId);var disconnect=function disconnect(){socket.emit(\"leaveGuild\",guildId);socket.disconnect();};socket.on(\"add_channel\",function(newChannel){cache.invalidateQueries(key);// cache.setQueryData(key, (data) => {\n//   return [...data, newChannel];\n// });\n});socket.on(\"edit_channel\",function(editedChannel){cache.setQueryData(key,function(d){var index=d===null||d===void 0?void 0:d.findIndex(function(c){return c.id===editedChannel.id;});if(index!==-1){d[index]=editedChannel;}else if(editedChannel.isPublic){d.push(editedChannel);}return d;});});socket.on(\"delete_channel\",function(deleteId){cache.setQueryData(key,function(d){var currentPath=\"/channels/\".concat(guildId,\"/\").concat(deleteId);if(location.pathname===currentPath&&guild){if(deleteId===guild.default_channel_id){history.replace(\"/channels/me\");}else{history.replace(\"\".concat(guild.default_channel_id));}}return d===null||d===void 0?void 0:d.filter(function(c){return c.id!==deleteId;});});});socket.on(\"new_notification\",function(id){var currentPath=\"/channels/\".concat(guildId,\"/\").concat(id);if(location.pathname!==currentPath){cache.setQueryData(key,function(d){var index=d===null||d===void 0?void 0:d.findIndex(function(c){return c.id===id;});if(index!==-1){d[index]=_objectSpread(_objectSpread({},d[index]),{},{hasNotification:true});}return d;});}});window.addEventListener(\"beforeunload\",disconnect);return function(){return disconnect();};},[guildId,key,cache,history,location,guild]);}","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/api/ws/useChannelSocket.js"],"names":["useEffect","getSocket","useHistory","useLocation","useQueryClient","useGetCurrentGuild","useChannelSocket","guildId","key","location","history","cache","guild","socket","emit","disconnect","on","newChannel","invalidateQueries","editedChannel","setQueryData","d","index","findIndex","c","id","isPublic","push","deleteId","currentPath","pathname","default_channel_id","replace","filter","hasNotification","window","addEventListener"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport getSocket from \"../getSocket\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useQueryClient } from \"react-query\";\nimport useGetCurrentGuild from \"hooks/useGetCurrentGuild\";\n\nexport default function useChannelSocket(guildId, key) {\n  const location = useLocation();\n  const history = useHistory();\n  const cache = useQueryClient();\n  const guild = useGetCurrentGuild(guildId);\n\n  useEffect(() => {\n    const socket = getSocket();\n    socket.emit(\"joinGuild\", guildId);\n\n    const disconnect = () => {\n      socket.emit(\"leaveGuild\", guildId);\n      socket.disconnect();\n    };\n\n    socket.on(\"add_channel\", (newChannel) => {\n      cache.invalidateQueries(key);\n      // cache.setQueryData(key, (data) => {\n      //   return [...data, newChannel];\n      // });\n    });\n\n    socket.on(\"edit_channel\", (editedChannel) => {\n      cache.setQueryData(key, (d) => {\n        const index = d?.findIndex((c) => c.id === editedChannel.id);\n        if (index !== -1) {\n          d[index] = editedChannel;\n        } else if (editedChannel.isPublic) {\n          d.push(editedChannel);\n        }\n        return d;\n      });\n    });\n\n    socket.on(\"delete_channel\", (deleteId) => {\n      cache.setQueryData(key, (d) => {\n        const currentPath = `/channels/${guildId}/${deleteId}`;\n        if (location.pathname === currentPath && guild) {\n          if (deleteId === guild.default_channel_id) {\n            history.replace(\"/channels/me\");\n          } else {\n            history.replace(`${guild.default_channel_id}`);\n          }\n        }\n        return d?.filter((c) => c.id !== deleteId);\n      });\n    });\n\n    socket.on(\"new_notification\", (id) => {\n      const currentPath = `/channels/${guildId}/${id}`;\n      if (location.pathname !== currentPath) {\n        cache.setQueryData(key, (d) => {\n          const index = d?.findIndex((c) => c.id === id);\n          if (index !== -1) {\n            d[index] = { ...d[index], hasNotification: true };\n          }\n          return d;\n        });\n      }\n    });\n\n    window.addEventListener(\"beforeunload\", disconnect);\n\n    return () => disconnect();\n  }, [guildId, key, cache, history, location, guild]);\n}\n"]},"metadata":{},"sourceType":"module"}