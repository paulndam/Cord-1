{"ast":null,"code":"import{Box,GridItem,UnorderedList,useDisclosure}from\"@chakra-ui/react\";import{getChannels}from\"api/handler/channel\";import useChannelSocket from\"api/ws/useChannelSocket\";import ChannelListItem from\"components/items/ChannelListItem\";import GuildMenu from\"components/menus/GuildMenu\";import CreateChannelModal from\"components/modals/CreateChannelModal\";import InviteModal from\"components/modals/InviteModal\";import React from\"react\";import{useQuery}from\"react-query\";import{useParams}from\"react-router-dom\";import{cKey}from\"utils/querykeys\";import AccountBar from\"../AccountBar\";import channelScrollbarCss from\"./css/ChannelScrollerCSS\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function Channels(){var _useDisclosure=useDisclosure(),inviteIsOpen=_useDisclosure.isOpen,inviteOpen=_useDisclosure.onOpen,inviteClose=_useDisclosure.onClose;var _useDisclosure2=useDisclosure(),channelIsOpen=_useDisclosure2.isOpen,channelOpen=_useDisclosure2.onOpen,channelClose=_useDisclosure2.onClose;var _useParams=useParams(),guildId=_useParams.guildId;var key=cKey(guildId);var _useQuery=useQuery(key,function(){return getChannels(guildId).then(function(res){return res.data;});}),data=_useQuery.data;useChannelSocket(guildId,key);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(GuildMenu,{channelOpen:channelOpen,inviteOpen:inviteOpen}),/*#__PURE__*/_jsxs(GridItem,{gridColumn:2,gridRow:\"2/4\",bg:\"brandGray.dark\",overflowY:\"hidden\",_hover:{overflowY:\"auto\"},css:channelScrollbarCss,children:[inviteIsOpen&&/*#__PURE__*/_jsx(InviteModal,{isOpen:inviteIsOpen,onClose:inviteClose}),channelIsOpen&&/*#__PURE__*/_jsx(CreateChannelModal,{guildId:guildId,onClose:channelClose,isOpen:channelIsOpen}),/*#__PURE__*/_jsxs(UnorderedList,{listStyleType:\"none\",ml:\"0\",mt:\"4\",children:[data===null||data===void 0?void 0:data.map(function(channel){return/*#__PURE__*/_jsx(ChannelListItem,{channel:channel,guildId:guildId},channel.id);}),/*#__PURE__*/_jsx(Box,{h:\"16\"})]}),/*#__PURE__*/_jsx(AccountBar,{})]})]});}","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/components/layouts/guild/Channels.js"],"names":["Box","GridItem","UnorderedList","useDisclosure","getChannels","useChannelSocket","ChannelListItem","GuildMenu","CreateChannelModal","InviteModal","React","useQuery","useParams","cKey","AccountBar","channelScrollbarCss","Channels","inviteIsOpen","isOpen","inviteOpen","onOpen","inviteClose","onClose","channelIsOpen","channelOpen","channelClose","guildId","key","then","res","data","overflowY","map","channel","id"],"mappings":"AAAA,OAASA,GAAT,CAAcC,QAAd,CAAwBC,aAAxB,CAAuCC,aAAvC,KAA4D,kBAA5D,CACA,OAASC,WAAT,KAA4B,qBAA5B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,yBAA7B,CACA,MAAOC,CAAAA,eAAP,KAA4B,kCAA5B,CACA,MAAOC,CAAAA,SAAP,KAAsB,4BAAtB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,sCAA/B,CACA,MAAOC,CAAAA,WAAP,KAAwB,+BAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,KAAyB,aAAzB,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,OAASC,IAAT,KAAqB,iBAArB,CACA,MAAOC,CAAAA,UAAP,KAAuB,eAAvB,CACA,MAAOC,CAAAA,mBAAP,KAAgC,0BAAhC,C,6IAEA,cAAe,SAASC,CAAAA,QAAT,EAAoB,oBAK7Bb,aAAa,EALgB,CAEvBc,YAFuB,gBAE/BC,MAF+B,CAGvBC,UAHuB,gBAG/BC,MAH+B,CAItBC,WAJsB,gBAI/BC,OAJ+B,qBAU7BnB,aAAa,EAVgB,CAOvBoB,aAPuB,iBAO/BL,MAP+B,CAQvBM,WARuB,iBAQ/BJ,MAR+B,CAStBK,YATsB,iBAS/BH,OAT+B,gBAYbV,SAAS,EAZI,CAYzBc,OAZyB,YAYzBA,OAZyB,CAajC,GAAMC,CAAAA,GAAG,CAAGd,IAAI,CAACa,OAAD,CAAhB,CAbiC,cAehBf,QAAQ,CAACgB,GAAD,CAAM,iBAC7BvB,CAAAA,WAAW,CAACsB,OAAD,CAAX,CAAqBE,IAArB,CAA0B,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAb,EAA1B,CAD6B,EAAN,CAfQ,CAezBA,IAfyB,WAezBA,IAfyB,CAmBjCzB,gBAAgB,CAACqB,OAAD,CAAUC,GAAV,CAAhB,CAEA,mBACE,wCACE,KAAC,SAAD,EAAW,WAAW,CAAEH,WAAxB,CAAqC,UAAU,CAAEL,UAAjD,EADF,cAEE,MAAC,QAAD,EACE,UAAU,CAAE,CADd,CAEE,OAAO,CAAE,KAFX,CAGE,EAAE,CAAC,gBAHL,CAIE,SAAS,CAAC,QAJZ,CAKE,MAAM,CAAE,CAAEY,SAAS,CAAE,MAAb,CALV,CAME,GAAG,CAAEhB,mBANP,WAQGE,YAAY,eACX,KAAC,WAAD,EAAa,MAAM,CAAEA,YAArB,CAAmC,OAAO,CAAEI,WAA5C,EATJ,CAWGE,aAAa,eACZ,KAAC,kBAAD,EACE,OAAO,CAAEG,OADX,CAEE,OAAO,CAAED,YAFX,CAGE,MAAM,CAAEF,aAHV,EAZJ,cAkBE,MAAC,aAAD,EAAe,aAAa,CAAC,MAA7B,CAAoC,EAAE,CAAC,GAAvC,CAA2C,EAAE,CAAC,GAA9C,WACGO,IADH,SACGA,IADH,iBACGA,IAAI,CAAEE,GAAN,CAAU,SAACC,OAAD,qBACT,KAAC,eAAD,EAEE,OAAO,CAAEA,OAFX,CAGE,OAAO,CAAEP,OAHX,EACOO,OAAO,CAACC,EADf,CADS,EAAV,CADH,cAQE,KAAC,GAAD,EAAK,CAAC,CAAC,IAAP,EARF,GAlBF,cA4BE,KAAC,UAAD,IA5BF,GAFF,GADF,CAmCD","sourcesContent":["import { Box, GridItem, UnorderedList, useDisclosure } from \"@chakra-ui/react\";\nimport { getChannels } from \"api/handler/channel\";\nimport useChannelSocket from \"api/ws/useChannelSocket\";\nimport ChannelListItem from \"components/items/ChannelListItem\";\nimport GuildMenu from \"components/menus/GuildMenu\";\nimport CreateChannelModal from \"components/modals/CreateChannelModal\";\nimport InviteModal from \"components/modals/InviteModal\";\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { cKey } from \"utils/querykeys\";\nimport AccountBar from \"../AccountBar\";\nimport channelScrollbarCss from \"./css/ChannelScrollerCSS\";\n\nexport default function Channels() {\n  const {\n    isOpen: inviteIsOpen,\n    onOpen: inviteOpen,\n    onClose: inviteClose,\n  } = useDisclosure();\n  const {\n    isOpen: channelIsOpen,\n    onOpen: channelOpen,\n    onClose: channelClose,\n  } = useDisclosure();\n\n  const { guildId } = useParams();\n  const key = cKey(guildId);\n\n  const { data } = useQuery(key, () =>\n    getChannels(guildId).then((res) => res.data)\n  );\n\n  useChannelSocket(guildId, key);\n\n  return (\n    <>\n      <GuildMenu channelOpen={channelOpen} inviteOpen={inviteOpen} />\n      <GridItem\n        gridColumn={2}\n        gridRow={\"2/4\"}\n        bg=\"brandGray.dark\"\n        overflowY=\"hidden\"\n        _hover={{ overflowY: \"auto\" }}\n        css={channelScrollbarCss}\n      >\n        {inviteIsOpen && (\n          <InviteModal isOpen={inviteIsOpen} onClose={inviteClose} />\n        )}\n        {channelIsOpen && (\n          <CreateChannelModal\n            guildId={guildId}\n            onClose={channelClose}\n            isOpen={channelIsOpen}\n          />\n        )}\n        <UnorderedList listStyleType=\"none\" ml=\"0\" mt=\"4\">\n          {data?.map((channel) => (\n            <ChannelListItem\n              key={channel.id}\n              channel={channel}\n              guildId={guildId}\n            />\n          ))}\n          <Box h=\"16\" />\n        </UnorderedList>\n        <AccountBar />\n      </GridItem>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}