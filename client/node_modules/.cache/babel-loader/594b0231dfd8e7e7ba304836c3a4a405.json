{"ast":null,"code":"import * as yup from \"yup\";\nexport const LoginSchema = yup.object().shape({\n  email: yup.string().required(\"Email is required\").defined(),\n  password: yup.string().required(\"Password is required\").defined()\n});\nexport const RegisterSchema = yup.object().shape({\n  username: yup.string().min(3).max(30).trim().required(\"Username is required\").defined(),\n  email: yup.string().email().lowercase().required(\"Email is required\").defined(),\n  password: yup.string().min(6, \"Password must be at least 6 characters long\").max(150).required(\"Password is required\").defined()\n});\nexport const UserSchema = yup.object().shape({\n  email: yup.string().email().lowercase().required(\"Email is required\").defined(),\n  username: yup.string().min(3).max(30).trim().required(\"Username is required\").defined()\n});\nexport const ResetPasswordSchema = yup.object().shape({\n  newPassword: yup.string().min(6, \"Password must be at least 6 characters long\").max(150).required(\"New password is required\").defined(),\n  confirmNewPassword: yup.string().oneOf([yup.ref(\"newPassword\"), undefined], \"Passwords do not match\").required(\"Confirm new password is required\").defined()\n});\nexport const ChangePasswordSchema = yup.object().shape({\n  currentPassword: yup.string().required(\"Old Password is required\").defined(),\n  newPassword: yup.string().min(6, \"Password must be at least 6 characters long\").max(150).required(\"New password is required\").defined(),\n  confirmNewPassword: yup.string().oneOf([yup.ref(\"newPassword\"), undefined], \"Passwords do not match\").required(\"Confirm new password is required\").defined()\n});\nexport const ForgotPasswordSchema = yup.object().shape({\n  email: yup.string().email().lowercase().required(\"Email is required\").defined()\n});","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/validation/auth.schema.js"],"names":["yup","LoginSchema","object","shape","email","string","required","defined","password","RegisterSchema","username","min","max","trim","lowercase","UserSchema","ResetPasswordSchema","newPassword","confirmNewPassword","oneOf","ref","undefined","ChangePasswordSchema","currentPassword","ForgotPasswordSchema"],"mappings":"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","sourcesContent":["import * as yup from \"yup\";\n\nexport const LoginSchema = yup.object().shape({\n  email: yup.string().required(\"Email is required\").defined(),\n  password: yup.string().required(\"Password is required\").defined(),\n});\n\nexport const RegisterSchema = yup.object().shape({\n  username: yup\n    .string()\n    .min(3)\n    .max(30)\n    .trim()\n    .required(\"Username is required\")\n    .defined(),\n  email: yup\n    .string()\n    .email()\n    .lowercase()\n    .required(\"Email is required\")\n    .defined(),\n  password: yup\n    .string()\n    .min(6, \"Password must be at least 6 characters long\")\n    .max(150)\n    .required(\"Password is required\")\n    .defined(),\n});\n\nexport const UserSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email()\n    .lowercase()\n    .required(\"Email is required\")\n    .defined(),\n  username: yup\n    .string()\n    .min(3)\n    .max(30)\n    .trim()\n    .required(\"Username is required\")\n    .defined(),\n});\n\nexport const ResetPasswordSchema = yup.object().shape({\n  newPassword: yup\n    .string()\n    .min(6, \"Password must be at least 6 characters long\")\n    .max(150)\n    .required(\"New password is required\")\n    .defined(),\n  confirmNewPassword: yup\n    .string()\n    .oneOf([yup.ref(\"newPassword\"), undefined], \"Passwords do not match\")\n    .required(\"Confirm new password is required\")\n    .defined(),\n});\n\nexport const ChangePasswordSchema = yup.object().shape({\n  currentPassword: yup.string().required(\"Old Password is required\").defined(),\n  newPassword: yup\n    .string()\n    .min(6, \"Password must be at least 6 characters long\")\n    .max(150)\n    .required(\"New password is required\")\n    .defined(),\n  confirmNewPassword: yup\n    .string()\n    .oneOf([yup.ref(\"newPassword\"), undefined], \"Passwords do not match\")\n    .required(\"Confirm new password is required\")\n    .defined(),\n});\n\nexport const ForgotPasswordSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email()\n    .lowercase()\n    .required(\"Email is required\")\n    .defined(),\n});\n"]},"metadata":{},"sourceType":"module"}