{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport getSocket from \"../getSocket\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useQueryClient } from \"react-query\";\nimport useGetCurrentGuild from \"hooks/useGetCurrentGuild\";\nexport default function useChannelSocket(guildId, key) {\n  _s();\n\n  const location = useLocation();\n  const history = useHistory();\n  const cache = useQueryClient();\n  const guild = useGetCurrentGuild(guildId);\n  useEffect(() => {\n    const socket = getSocket();\n    socket.emit(\"joinGuild\", guildId);\n\n    const disconnect = () => {\n      socket.emit(\"leaveGuild\", guildId);\n      socket.disconnect();\n    };\n\n    socket.on(\"add_channel\", newChannel => {\n      cache.invalidateQueries(key); // cache.setQueryData(key, (data) => {\n      //   return [...data, newChannel];\n      // });\n    });\n    socket.on(\"edit_channel\", editedChannel => {\n      cache.setQueryData(key, d => {\n        const index = d === null || d === void 0 ? void 0 : d.findIndex(c => c.id === editedChannel.id);\n\n        if (index !== -1) {\n          d[index] = editedChannel;\n        } else if (editedChannel.isPublic) {\n          d.push(editedChannel);\n        }\n\n        return d;\n      });\n    });\n    socket.on(\"delete_channel\", deleteId => {\n      cache.setQueryData(key, d => {\n        const currentPath = `/channels/${guildId}/${deleteId}`;\n\n        if (location.pathname === currentPath && guild) {\n          if (deleteId === guild.default_channel_id) {\n            history.replace(\"/channels/me\");\n          } else {\n            history.replace(`${guild.default_channel_id}`);\n          }\n        }\n\n        return d === null || d === void 0 ? void 0 : d.filter(c => c.id !== deleteId);\n      });\n    });\n    socket.on(\"new_notification\", id => {\n      const currentPath = `/channels/${guildId}/${id}`;\n\n      if (location.pathname !== currentPath) {\n        cache.setQueryData(key, d => {\n          const index = d === null || d === void 0 ? void 0 : d.findIndex(c => c.id === id);\n\n          if (index !== -1) {\n            d[index] = { ...d[index],\n              hasNotification: true\n            };\n          }\n\n          return d;\n        });\n      }\n    });\n    window.addEventListener(\"beforeunload\", disconnect);\n    return () => disconnect();\n  }, [guildId, key, cache, history, location, guild]);\n}\n\n_s(useChannelSocket, \"+pdvjUKPjd4MhqBfETPqxNn4DvU=\", false, function () {\n  return [useLocation, useHistory, useQueryClient, useGetCurrentGuild];\n});","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/api/ws/useChannelSocket.js"],"names":["useEffect","getSocket","useHistory","useLocation","useQueryClient","useGetCurrentGuild","useChannelSocket","guildId","key","location","history","cache","guild","socket","emit","disconnect","on","newChannel","invalidateQueries","editedChannel","setQueryData","d","index","findIndex","c","id","isPublic","push","deleteId","currentPath","pathname","default_channel_id","replace","filter","hasNotification","window","addEventListener"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport getSocket from \"../getSocket\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useQueryClient } from \"react-query\";\nimport useGetCurrentGuild from \"hooks/useGetCurrentGuild\";\n\nexport default function useChannelSocket(guildId, key) {\n  const location = useLocation();\n  const history = useHistory();\n  const cache = useQueryClient();\n  const guild = useGetCurrentGuild(guildId);\n\n  useEffect(() => {\n    const socket = getSocket();\n    socket.emit(\"joinGuild\", guildId);\n\n    const disconnect = () => {\n      socket.emit(\"leaveGuild\", guildId);\n      socket.disconnect();\n    };\n\n    socket.on(\"add_channel\", (newChannel) => {\n      cache.invalidateQueries(key);\n      // cache.setQueryData(key, (data) => {\n      //   return [...data, newChannel];\n      // });\n    });\n\n    socket.on(\"edit_channel\", (editedChannel) => {\n      cache.setQueryData(key, (d) => {\n        const index = d?.findIndex((c) => c.id === editedChannel.id);\n        if (index !== -1) {\n          d[index] = editedChannel;\n        } else if (editedChannel.isPublic) {\n          d.push(editedChannel);\n        }\n        return d;\n      });\n    });\n\n    socket.on(\"delete_channel\", (deleteId) => {\n      cache.setQueryData(key, (d) => {\n        const currentPath = `/channels/${guildId}/${deleteId}`;\n        if (location.pathname === currentPath && guild) {\n          if (deleteId === guild.default_channel_id) {\n            history.replace(\"/channels/me\");\n          } else {\n            history.replace(`${guild.default_channel_id}`);\n          }\n        }\n        return d?.filter((c) => c.id !== deleteId);\n      });\n    });\n\n    socket.on(\"new_notification\", (id) => {\n      const currentPath = `/channels/${guildId}/${id}`;\n      if (location.pathname !== currentPath) {\n        cache.setQueryData(key, (d) => {\n          const index = d?.findIndex((c) => c.id === id);\n          if (index !== -1) {\n            d[index] = { ...d[index], hasNotification: true };\n          }\n          return d;\n        });\n      }\n    });\n\n    window.addEventListener(\"beforeunload\", disconnect);\n\n    return () => disconnect();\n  }, [guildId, key, cache, history, location, guild]);\n}\n"]},"metadata":{},"sourceType":"module"}