{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = require('react');\n\nvar downshift = require('downshift');\n\nvar matchSorter = _interopDefault(require('match-sorter'));\n\nvar Highlighter = _interopDefault(require('react-highlight-words'));\n\nvar useDeepCompareEffect = _interopDefault(require('react-use/lib/useDeepCompareEffect'));\n\nvar formControl = require('@chakra-ui/form-control');\n\nvar layout = require('@chakra-ui/layout');\n\nvar button = require('@chakra-ui/button');\n\nvar input = require('@chakra-ui/input');\n\nvar icons = require('@chakra-ui/icons');\n\nvar tag = require('@chakra-ui/tag');\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction defaultOptionFilterFunc(items, inputValue) {\n  return matchSorter(items, inputValue, {\n    keys: ['value', 'label']\n  });\n}\n\nvar CUIAutoComplete = function CUIAutoComplete(props) {\n  var items = props.items,\n      _props$optionFilterFu = props.optionFilterFunc,\n      optionFilterFunc = _props$optionFilterFu === void 0 ? defaultOptionFilterFunc : _props$optionFilterFu,\n      itemRenderer = props.itemRenderer,\n      _props$highlightItemB = props.highlightItemBg,\n      highlightItemBg = _props$highlightItemB === void 0 ? 'gray.100' : _props$highlightItemB,\n      placeholder = props.placeholder,\n      label = props.label,\n      listStyleProps = props.listStyleProps,\n      labelStyleProps = props.labelStyleProps,\n      inputStyleProps = props.inputStyleProps,\n      toggleButtonStyleProps = props.toggleButtonStyleProps,\n      tagStyleProps = props.tagStyleProps,\n      selectedIconProps = props.selectedIconProps,\n      listItemStyleProps = props.listItemStyleProps,\n      onCreateItem = props.onCreateItem,\n      icon = props.icon,\n      downshiftProps = _objectWithoutPropertiesLoose(props, [\"items\", \"optionFilterFunc\", \"itemRenderer\", \"highlightItemBg\", \"placeholder\", \"label\", \"listStyleProps\", \"labelStyleProps\", \"inputStyleProps\", \"toggleButtonStyleProps\", \"tagStyleProps\", \"selectedIconProps\", \"listItemStyleProps\", \"onCreateItem\", \"icon\"]);\n  /* States */\n\n\n  var _React$useState = React.useState(false),\n      isCreating = _React$useState[0],\n      setIsCreating = _React$useState[1];\n\n  var _React$useState2 = React.useState(''),\n      inputValue = _React$useState2[0],\n      setInputValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(items),\n      inputItems = _React$useState3[0],\n      setInputItems = _React$useState3[1];\n  /* Refs */\n\n\n  var disclosureRef = React.useRef(null);\n  /* Downshift Props */\n\n  var _useMultipleSelection = downshift.useMultipleSelection(downshiftProps),\n      getSelectedItemProps = _useMultipleSelection.getSelectedItemProps,\n      getDropdownProps = _useMultipleSelection.getDropdownProps,\n      addSelectedItem = _useMultipleSelection.addSelectedItem,\n      removeSelectedItem = _useMultipleSelection.removeSelectedItem,\n      selectedItems = _useMultipleSelection.selectedItems;\n\n  var selectedItemValues = selectedItems.map(function (item) {\n    return item.value;\n  });\n\n  var _useCombobox = downshift.useCombobox({\n    inputValue: inputValue,\n    selectedItem: undefined,\n    items: inputItems,\n    onInputValueChange: function onInputValueChange(_ref) {\n      var inputValue = _ref.inputValue,\n          selectedItem = _ref.selectedItem;\n      var filteredItems = optionFilterFunc(items, inputValue || '');\n\n      if (isCreating && filteredItems.length > 0) {\n        setIsCreating(false);\n      }\n\n      if (!selectedItem) {\n        setInputItems(filteredItems);\n      }\n    },\n    stateReducer: function stateReducer(state, actionAndChanges) {\n      var changes = actionAndChanges.changes,\n          type = actionAndChanges.type;\n\n      switch (type) {\n        case downshift.useCombobox.stateChangeTypes.InputBlur:\n          return _extends({}, changes, {\n            isOpen: false\n          });\n\n        case downshift.useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case downshift.useCombobox.stateChangeTypes.ItemClick:\n          return _extends({}, changes, {\n            highlightedIndex: state.highlightedIndex,\n            inputValue: inputValue,\n            isOpen: true\n          });\n\n        case downshift.useCombobox.stateChangeTypes.FunctionSelectItem:\n          return _extends({}, changes, {\n            inputValue: inputValue\n          });\n\n        default:\n          return changes;\n      }\n    },\n    // @ts-ignore\n    onStateChange: function onStateChange(_ref2) {\n      var inputValue = _ref2.inputValue,\n          type = _ref2.type,\n          selectedItem = _ref2.selectedItem;\n\n      switch (type) {\n        case downshift.useCombobox.stateChangeTypes.InputChange:\n          setInputValue(inputValue || '');\n          break;\n\n        case downshift.useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case downshift.useCombobox.stateChangeTypes.ItemClick:\n          if (selectedItem) {\n            if (selectedItemValues.includes(selectedItem.value)) {\n              removeSelectedItem(selectedItem);\n            } else {\n              if (onCreateItem && isCreating) {\n                onCreateItem(selectedItem);\n                setIsCreating(false);\n                setInputItems(items);\n                setInputValue('');\n              } else {\n                addSelectedItem(selectedItem);\n              }\n            } // @ts-ignore\n\n\n            selectItem(null);\n          }\n\n          break;\n      }\n    }\n  }),\n      isOpen = _useCombobox.isOpen,\n      getToggleButtonProps = _useCombobox.getToggleButtonProps,\n      getLabelProps = _useCombobox.getLabelProps,\n      getMenuProps = _useCombobox.getMenuProps,\n      getInputProps = _useCombobox.getInputProps,\n      getComboboxProps = _useCombobox.getComboboxProps,\n      highlightedIndex = _useCombobox.highlightedIndex,\n      getItemProps = _useCombobox.getItemProps,\n      openMenu = _useCombobox.openMenu,\n      selectItem = _useCombobox.selectItem,\n      setHighlightedIndex = _useCombobox.setHighlightedIndex;\n\n  React.useEffect(function () {\n    if (inputItems.length === 0) {\n      setIsCreating(true); // @ts-ignore\n\n      setInputItems([{\n        label: \"\" + inputValue,\n        value: inputValue\n      }]);\n      setHighlightedIndex(0);\n    }\n  }, [inputItems, setIsCreating, setHighlightedIndex, inputValue]);\n  useDeepCompareEffect(function () {\n    setInputItems(items);\n  }, [items]);\n  /* Default Items Renderer */\n\n  function defaultItemRenderer(selected) {\n    return selected.label;\n  }\n\n  return React.createElement(layout.Stack, null, React.createElement(formControl.FormLabel, Object.assign({}, _extends({}, labelStyleProps, getLabelProps({}))), label), selectedItems && React.createElement(layout.Stack, {\n    spacing: 2,\n    isInline: true,\n    flexWrap: 'wrap'\n  }, selectedItems.map(function (selectedItem, index) {\n    return React.createElement(tag.Tag, Object.assign({\n      mb: 1\n    }, tagStyleProps, {\n      key: \"selected-item-\" + index\n    }, getSelectedItemProps({\n      selectedItem: selectedItem,\n      index: index\n    })), React.createElement(tag.TagLabel, null, selectedItem.label), React.createElement(tag.TagCloseButton, {\n      onClick: function onClick(e) {\n        e.stopPropagation();\n        removeSelectedItem(selectedItem);\n      },\n      \"aria-label\": 'Remove menu selection badge'\n    }));\n  })), React.createElement(layout.Stack, Object.assign({\n    isInline: true\n  }, getComboboxProps()), React.createElement(input.Input, Object.assign({}, inputStyleProps, getInputProps(getDropdownProps({\n    placeholder: placeholder,\n    onClick: isOpen ? function () {} : openMenu,\n    onFocus: isOpen ? function () {} : openMenu,\n    ref: disclosureRef\n  })))), React.createElement(button.Button, Object.assign({}, toggleButtonStyleProps, getToggleButtonProps(), {\n    \"aria-label\": 'toggle menu'\n  }), React.createElement(icons.ArrowDownIcon, null))), React.createElement(layout.Box, {\n    pb: 4,\n    mb: 4\n  }, React.createElement(layout.List, Object.assign({\n    bg: 'white',\n    borderRadius: '4px',\n    border: isOpen && '1px solid rgba(0,0,0,0.1)',\n    boxShadow: '6px 5px 8px rgba(0,50,30,0.02)'\n  }, listStyleProps, getMenuProps()), isOpen && inputItems.map(function (item, index) {\n    return React.createElement(layout.ListItem, Object.assign({\n      px: 2,\n      py: 1,\n      borderBottom: '1px solid rgba(0,0,0,0.01)'\n    }, listItemStyleProps, {\n      bg: highlightedIndex === index ? highlightItemBg : 'inherit',\n      key: \"\" + item.value + index\n    }, getItemProps({\n      item: item,\n      index: index\n    })), isCreating ? React.createElement(layout.Text, null, React.createElement(layout.Box, {\n      as: 'span'\n    }, \"Create\"), ' ', React.createElement(layout.Box, {\n      as: 'span',\n      bg: 'yellow.300',\n      fontWeight: 'bold'\n    }, \"\\\"\", item.label, \"\\\"\")) : React.createElement(layout.Box, {\n      display: 'inline-flex',\n      alignItems: 'center'\n    }, selectedItemValues.includes(item.value) && React.createElement(layout.ListIcon, Object.assign({\n      as: icon || icons.CheckCircleIcon,\n      color: 'green.500',\n      role: 'img',\n      display: 'inline',\n      \"aria-label\": 'Selected'\n    }, selectedIconProps)), itemRenderer ? itemRenderer(item) : React.createElement(Highlighter, {\n      autoEscape: true,\n      searchWords: [inputValue || ''],\n      textToHighlight: defaultItemRenderer(item)\n    })));\n  }))));\n};\n\nexports.CUIAutoComplete = CUIAutoComplete;","map":{"version":3,"sources":["../src/index.tsx"],"names":["matchSorter","keys","CUIAutoComplete","items","optionFilterFunc","defaultOptionFilterFunc","itemRenderer","highlightItemBg","placeholder","label","listStyleProps","labelStyleProps","inputStyleProps","toggleButtonStyleProps","tagStyleProps","selectedIconProps","listItemStyleProps","onCreateItem","icon","downshiftProps","props","isCreating","setIsCreating","React","inputValue","setInputValue","inputItems","setInputItems","disclosureRef","getSelectedItemProps","getDropdownProps","addSelectedItem","removeSelectedItem","selectedItems","useMultipleSelection","selectedItemValues","item","isOpen","getToggleButtonProps","getLabelProps","getMenuProps","getInputProps","getComboboxProps","highlightedIndex","getItemProps","openMenu","selectItem","setHighlightedIndex","useCombobox","selectedItem","onInputValueChange","filteredItems","stateReducer","changes","type","actionAndChanges","state","onStateChange","value","useDeepCompareEffect","selected","Stack","FormLabel","spacing","isInline","flexWrap","Tag","mb","key","index","TagLabel","TagCloseButton","onClick","e","Input","onFocus","ref","Button","ArrowDownIcon","Box","pb","List","bg","borderRadius","border","boxShadow","ListItem","px","py","borderBottom","Text","as","fontWeight","display","alignItems","ListIcon","CheckCircleIcon","color","role","autoEscape","searchWords","textToHighlight","defaultItemRenderer"],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\nimport * as React from 'react'\nimport {\n  useCombobox,\n  useMultipleSelection,\n  UseMultipleSelectionProps\n} from 'downshift'\nimport matchSorter from 'match-sorter'\nimport Highlighter from 'react-highlight-words'\nimport useDeepCompareEffect from 'react-use/lib/useDeepCompareEffect'\nimport { FormLabel, FormLabelProps } from '@chakra-ui/form-control'\nimport { Text, Stack, Box, BoxProps, List, ListItem, ListIcon } from '@chakra-ui/layout'\nimport { Button, ButtonProps } from '@chakra-ui/button'\nimport { Input, InputProps } from '@chakra-ui/input'\nimport { IconProps, CheckCircleIcon, ArrowDownIcon } from '@chakra-ui/icons'\nimport { Tag, TagCloseButton, TagLabel, TagProps } from '@chakra-ui/tag'\nimport { ComponentWithAs } from '@chakra-ui/react'\n\nexport interface Item {\n  label: string\n  value: string\n}\n\nexport interface CUIAutoCompleteProps<T extends Item>\n  extends UseMultipleSelectionProps<T> {\n  items: T[]\n  placeholder: string\n  label: string\n  highlightItemBg?: string\n  onCreateItem?: (item: T) => void\n  optionFilterFunc?: (items: T[], inputValue: string) => T[]\n  itemRenderer?: (item: T) => string | JSX.Element\n  labelStyleProps?: FormLabelProps\n  inputStyleProps?: InputProps\n  toggleButtonStyleProps?: ButtonProps\n  tagStyleProps?: TagProps\n  listStyleProps?: BoxProps\n  listItemStyleProps?: BoxProps\n  emptyState?: (inputValue: string) => React.ReactNode\n  selectedIconProps?: Omit<IconProps, 'name'> & {\n    icon: IconProps['name'] | React.ComponentType\n  }\n  icon?: ComponentWithAs<\"svg\", IconProps>;\n}\n\nfunction defaultOptionFilterFunc<T>(items: T[], inputValue: string) {\n  return matchSorter(items, inputValue, { keys: ['value', 'label'] })\n}\n\nexport const CUIAutoComplete = <T extends Item>(\n  props: CUIAutoCompleteProps<T>\n): React.ReactElement<CUIAutoCompleteProps<T>> => {\n  const {\n    items,\n    optionFilterFunc = defaultOptionFilterFunc,\n    itemRenderer,\n    highlightItemBg = 'gray.100',\n    placeholder,\n    label,\n    listStyleProps,\n    labelStyleProps,\n    inputStyleProps,\n    toggleButtonStyleProps,\n    tagStyleProps,\n    selectedIconProps,\n    listItemStyleProps,\n    onCreateItem,\n    icon,\n    ...downshiftProps\n  } = props\n\n  /* States */\n  const [isCreating, setIsCreating] = React.useState(false)\n  const [inputValue, setInputValue] = React.useState('')\n  const [inputItems, setInputItems] = React.useState<T[]>(items)\n\n  /* Refs */\n  const disclosureRef = React.useRef(null)\n\n  /* Downshift Props */\n  const {\n    getSelectedItemProps,\n    getDropdownProps,\n    addSelectedItem,\n    removeSelectedItem,\n    selectedItems\n  } = useMultipleSelection(downshiftProps)\n  const selectedItemValues = selectedItems.map((item) => item.value)\n\n  const {\n    isOpen,\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    highlightedIndex,\n    getItemProps,\n    openMenu,\n    selectItem,\n    setHighlightedIndex\n  } = useCombobox({\n    inputValue,\n    selectedItem: undefined,\n    items: inputItems,\n    onInputValueChange: ({ inputValue, selectedItem }) => {\n      const filteredItems = optionFilterFunc(items, inputValue || '')\n\n      if (isCreating && filteredItems.length > 0) {\n        setIsCreating(false)\n      }\n\n      if (!selectedItem) {\n        setInputItems(filteredItems)\n      }\n    },\n    stateReducer: (state, actionAndChanges) => {\n      const { changes, type } = actionAndChanges\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputBlur:\n          return {\n            ...changes,\n            isOpen: false\n          }\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          return {\n            ...changes,\n            highlightedIndex: state.highlightedIndex,\n            inputValue,\n            isOpen: true\n          }\n        case useCombobox.stateChangeTypes.FunctionSelectItem:\n          return {\n            ...changes,\n            inputValue\n          }\n        default:\n          return changes\n      }\n    },\n    // @ts-ignore\n    onStateChange: ({ inputValue, type, selectedItem }) => {\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputChange:\n          setInputValue(inputValue || '')\n          break\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          if (selectedItem) {\n            if (selectedItemValues.includes(selectedItem.value)) {\n              removeSelectedItem(selectedItem)\n            } else {\n              if (onCreateItem && isCreating) {\n                onCreateItem(selectedItem)\n                setIsCreating(false)\n                setInputItems(items)\n                setInputValue('')\n              } else {\n                addSelectedItem(selectedItem)\n              }\n            }\n\n            // @ts-ignore\n            selectItem(null)\n          }\n          break\n        default:\n          break\n      }\n    }\n  })\n\n  React.useEffect(() => {\n    if (inputItems.length === 0) {\n      setIsCreating(true)\n      // @ts-ignore\n      setInputItems([{ label: `${inputValue}`, value: inputValue }])\n      setHighlightedIndex(0)\n    }\n  }, [inputItems, setIsCreating, setHighlightedIndex, inputValue])\n\n  useDeepCompareEffect(() => {\n    setInputItems(items)\n  }, [items])\n\n  /* Default Items Renderer */\n  function defaultItemRenderer<T extends Item>(selected: T) {\n    return selected.label\n  }\n\n  return (\n    <Stack>\n      <FormLabel {...{...labelStyleProps, ...getLabelProps({})}}>{label}</FormLabel>\n\n      {/* ---------Stack with Selected Menu Tags above the Input Box--------- */}\n      {selectedItems && (\n        <Stack spacing={2} isInline flexWrap='wrap'>\n          {selectedItems.map((selectedItem, index) => (\n            <Tag\n              mb={1}\n              {...tagStyleProps}\n              key={`selected-item-${index}`}\n              {...getSelectedItemProps({ selectedItem, index })}\n            >\n              <TagLabel>{selectedItem.label}</TagLabel>\n              <TagCloseButton\n                onClick={(e) => {\n                  e.stopPropagation()\n                  removeSelectedItem(selectedItem)\n                }}\n                aria-label='Remove menu selection badge'\n              />\n            </Tag>\n          ))}\n        </Stack>\n      )}\n      {/* ---------Stack with Selected Menu Tags above the Input Box--------- */}\n\n      {/* -----------Section that renders the input element ----------------- */}\n      <Stack isInline {...getComboboxProps()}>\n        <Input\n          {...inputStyleProps}\n          {...getInputProps(\n            getDropdownProps({\n              placeholder,\n              onClick: isOpen ? () => { } : openMenu,\n              onFocus: isOpen ? () => { } : openMenu,\n              ref: disclosureRef\n            })\n          )}\n        />\n        <Button\n          {...toggleButtonStyleProps}\n          {...getToggleButtonProps()}\n          aria-label='toggle menu'\n        >\n          <ArrowDownIcon />\n        </Button>\n      </Stack>\n      {/* -----------Section that renders the input element ----------------- */}\n\n      {/* -----------Section that renders the Menu Lists Component ----------------- */}\n      <Box pb={4} mb={4}>\n        <List\n          bg='white'\n          borderRadius='4px'\n          border={isOpen && '1px solid rgba(0,0,0,0.1)'}\n          boxShadow='6px 5px 8px rgba(0,50,30,0.02)'\n          {...listStyleProps}\n          {...getMenuProps()}\n        >\n          {isOpen &&\n            inputItems.map((item, index) => (\n              <ListItem\n                px={2}\n                py={1}\n                borderBottom='1px solid rgba(0,0,0,0.01)'\n                {...listItemStyleProps}\n                bg={highlightedIndex === index ? highlightItemBg : 'inherit'}\n                key={`${item.value}${index}`}\n                {...getItemProps({ item, index })}\n              >\n                {isCreating ? (\n                  <Text>\n                    <Box as='span'>Create</Box>{' '}\n                    <Box as='span' bg='yellow.300' fontWeight='bold'>\n                      \"{item.label}\"\n                    </Box>\n                  </Text>\n                ) : (\n                    <Box display='inline-flex' alignItems='center'>\n                      {selectedItemValues.includes(item.value) && (\n                        <ListIcon\n                          as={icon || CheckCircleIcon}\n                          color='green.500'\n                          role='img'\n                          display='inline'\n                          aria-label='Selected'\n                          {...selectedIconProps}\n                        />\n                      )}\n\n                      {itemRenderer ? (\n                        itemRenderer(item)\n                      ) : (\n                          <Highlighter\n                            autoEscape\n                            searchWords={[inputValue || '']}\n                            textToHighlight={defaultItemRenderer(item)}\n                          />\n                        )}\n                    </Box>\n                  )}\n              </ListItem>\n            ))}\n        </List>\n      </Box>\n      {/* ----------- End Section that renders the Menu Lists Component ----------------- */}\n    </Stack>\n  )\n}\n"]},"metadata":{},"sourceType":"script"}