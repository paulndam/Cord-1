{"ast":null,"code":"import _regeneratorRuntime from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Avatar,Box,Button,Flex,FormControl,FormLabel,Modal,ModalBody,ModalCloseButton,ModalContent,ModalFooter,ModalHeader,ModalOverlay,Switch,Text}from\"@chakra-ui/react\";import{createChannel}from\"api/handler/channel\";import{getGuildMembers}from\"api/handler/guilds\";import{CUIAutoComplete}from\"chakra-ui-autocomplete\";import{Form,Formik}from\"formik\";import React,{useState}from\"react\";import{AiOutlineLock}from\"react-icons/ai\";import{useQuery}from\"react-query\";import{mKey}from\"utils/querykeys\";import toErrorMap from\"utils/toErrorMap\";import{ChannelSchema}from\"validation/channel.schema\";import InputField from\"components/shared/InputField\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function CreateChannelModal(_ref){var guildId=_ref.guildId,isOpen=_ref.isOpen,onClose=_ref.onClose;var key=mKey(guildId);var _useQuery=useQuery(key,function(){return getGuildMembers(guildId).then(function(res){return res.data;});}),data=_useQuery.data;function handleCreateChannel(_x,_x2){return _handleCreateChannel.apply(this,arguments);}function _handleCreateChannel(){_handleCreateChannel=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(values,_ref2){var setErrors,resetForm,ids,_yield$createChannel,_data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setErrors=_ref2.setErrors,resetForm=_ref2.resetForm;_context.prev=1;ids=[];selectedItems.map(function(item){return ids.push(item.value);});_context.next=6;return createChannel(guildId,_objectSpread(_objectSpread({},values),{},{members:ids}));case 6:_yield$createChannel=_context.sent;_data=_yield$createChannel.data;if(_data){resetForm();onClose();}_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);setErrors(toErrorMap(_context.t0));case 14:case\"end\":return _context.stop();}}},_callee,null,[[1,11]]);}));return _handleCreateChannel.apply(this,arguments);}var members=[];var _useState=useState([]),_useState2=_slicedToArray(_useState,2),selectedItems=_useState2[0],setSelectedItems=_useState2[1];data===null||data===void 0?void 0:data.map(function(m){return members.push({label:m.username,value:m.id,image:m.image});});var handleCreateItem=function handleCreateItem(item){setSelectedItems(function(curr){return[].concat(_toConsumableArray(curr),[item]);});};var handleSelectedItemsChange=function handleSelectedItemsChange(selectedItems){if(selectedItems){setSelectedItems(selectedItems);}};var ListItem=function ListItem(selected){return/*#__PURE__*/_jsxs(Flex,{align:\"center\",children:[/*#__PURE__*/_jsx(Avatar,{mr:2,size:\"sm\",src:selected.image}),/*#__PURE__*/_jsx(Text,{textColor:\"#000\",children:selected.label})]});};return/*#__PURE__*/_jsxs(Modal,{isOpen:isOpen,onClose:onClose,isCentered:true,children:[/*#__PURE__*/_jsx(ModalOverlay,{}),/*#__PURE__*/_jsx(ModalContent,{bg:\"brandGray.light\",children:/*#__PURE__*/_jsx(Formik,{initialValues:{name:\"\",isPublic:true},validationSchema:ChannelSchema,onSubmit:handleCreateChannel,children:function children(_ref3){var isSubmitting=_ref3.isSubmitting,setFieldValue=_ref3.setFieldValue,values=_ref3.values;return/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(ModalHeader,{textAlign:\"center\",fontWeight:\"bold\",children:\"Create Text Channel\"}),/*#__PURE__*/_jsx(ModalCloseButton,{}),/*#__PURE__*/_jsxs(ModalBody,{children:[/*#__PURE__*/_jsx(InputField,{label:\"channel name\",name:\"name\"}),/*#__PURE__*/_jsxs(FormControl,{display:\"flex\",alignItems:\"center\",justifyContent:\"space-between\",mt:\"4\",children:[/*#__PURE__*/_jsx(FormLabel,{htmlFor:\"email-alerts\",mb:\"0\",children:/*#__PURE__*/_jsxs(Flex,{align:\"center\",children:[/*#__PURE__*/_jsx(AiOutlineLock,{}),/*#__PURE__*/_jsx(Text,{ml:\"2\",children:\"Private Channel\"})]})}),/*#__PURE__*/_jsx(Switch,{onChange:function onChange(e){setFieldValue(\"isPublic\",!e.target.checked);}})]}),/*#__PURE__*/_jsx(Text,{mt:\"4\",fontSize:\"14px\",textColor:\"brandGray.accent\",children:\"By making a channel private, only selected members will be able to view this channel\"}),!values.isPublic&&/*#__PURE__*/_jsx(Box,{mt:\"2\",pb:0,children:/*#__PURE__*/_jsx(CUIAutoComplete,{label:\"Who can access this channel\",placeholder:\"\",onCreateItem:handleCreateItem,items:members,selectedItems:selectedItems,itemRenderer:ListItem,onSelectedItemsChange:function onSelectedItemsChange(changes){return handleSelectedItemsChange(changes.selectedItems);}})})]}),/*#__PURE__*/_jsxs(ModalFooter,{bg:\"brandGray.dark\",children:[/*#__PURE__*/_jsx(Button,{onClick:onClose,fontSize:\"14px\",mr:6,variant:\"link\",children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{background:\"highlight.standard\",color:\"white\",type:\"submit\",fontSize:\"14px\",_hover:{bg:\"highlight.hover\"},_active:{bg:\"highlight.active\"},_focus:{boxShadow:\"none\"},isLoading:isSubmitting,children:\"Create Channel\"})]})]});}})})]});}","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/components/modals/CreateChannelModal.js"],"names":["Avatar","Box","Button","Flex","FormControl","FormLabel","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","Switch","Text","createChannel","getGuildMembers","CUIAutoComplete","Form","Formik","React","useState","AiOutlineLock","useQuery","mKey","toErrorMap","ChannelSchema","InputField","CreateChannelModal","guildId","isOpen","onClose","key","then","res","data","handleCreateChannel","values","setErrors","resetForm","ids","selectedItems","map","item","push","value","members","setSelectedItems","m","label","username","id","image","handleCreateItem","curr","handleSelectedItemsChange","ListItem","selected","name","isPublic","isSubmitting","setFieldValue","e","target","checked","changes","bg","boxShadow"],"mappings":"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","sourcesContent":["import {\n  Avatar,\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Switch,\n  Text,\n} from \"@chakra-ui/react\";\nimport { createChannel } from \"api/handler/channel\";\nimport { getGuildMembers } from \"api/handler/guilds\";\nimport { CUIAutoComplete } from \"chakra-ui-autocomplete\";\nimport { Form, Formik } from \"formik\";\nimport React, { useState } from \"react\";\nimport { AiOutlineLock } from \"react-icons/ai\";\nimport { useQuery } from \"react-query\";\nimport { mKey } from \"utils/querykeys\";\nimport toErrorMap from \"utils/toErrorMap\";\nimport { ChannelSchema } from \"validation/channel.schema\";\nimport InputField from \"components/shared/InputField\";\n\nexport default function CreateChannelModal({ guildId, isOpen, onClose }) {\n  const key = mKey(guildId);\n  const { data } = useQuery(key, () =>\n    getGuildMembers(guildId).then((res) => res.data)\n  );\n\n  async function handleCreateChannel(values, { setErrors, resetForm }) {\n    try {\n      const ids = [];\n      selectedItems.map((item) => ids.push(item.value));\n      const { data } = await createChannel(guildId, {\n        ...values,\n        members: ids,\n      });\n      if (data) {\n        resetForm();\n        onClose();\n      }\n    } catch (error) {\n      setErrors(toErrorMap(error));\n    }\n  }\n\n  const members = [];\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  data?.map((m) =>\n    members.push({ label: m.username, value: m.id, image: m.image })\n  );\n\n  const handleCreateItem = (item) => {\n    setSelectedItems((curr) => [...curr, item]);\n  };\n\n  const handleSelectedItemsChange = (selectedItems) => {\n    if (selectedItems) {\n      setSelectedItems(selectedItems);\n    }\n  };\n\n  const ListItem = (selected) => {\n    return (\n      <Flex align=\"center\">\n        <Avatar mr={2} size=\"sm\" src={selected.image} />\n        <Text textColor={\"#000\"}>{selected.label}</Text>\n      </Flex>\n    );\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent bg=\"brandGray.light\">\n        <Formik\n          initialValues={{\n            name: \"\",\n            isPublic: true,\n          }}\n          validationSchema={ChannelSchema}\n          onSubmit={handleCreateChannel}\n        >\n          {({ isSubmitting, setFieldValue, values }) => (\n            <Form>\n              <ModalHeader textAlign=\"center\" fontWeight=\"bold\">\n                Create Text Channel\n              </ModalHeader>\n              <ModalCloseButton />\n              <ModalBody>\n                <InputField label=\"channel name\" name=\"name\" />\n\n                <FormControl\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"space-between\"\n                  mt=\"4\"\n                >\n                  <FormLabel htmlFor=\"email-alerts\" mb=\"0\">\n                    <Flex align=\"center\">\n                      <AiOutlineLock />\n                      <Text ml=\"2\">Private Channel</Text>\n                    </Flex>\n                  </FormLabel>\n                  <Switch\n                    onChange={(e) => {\n                      setFieldValue(\"isPublic\", !e.target.checked);\n                    }}\n                  />\n                </FormControl>\n                <Text mt=\"4\" fontSize=\"14px\" textColor=\"brandGray.accent\">\n                  By making a channel private, only selected members will be\n                  able to view this channel\n                </Text>\n                {!values.isPublic && (\n                  <Box mt={\"2\"} pb={0}>\n                    <CUIAutoComplete\n                      label=\"Who can access this channel\"\n                      placeholder=\"\"\n                      onCreateItem={handleCreateItem}\n                      items={members}\n                      selectedItems={selectedItems}\n                      itemRenderer={ListItem}\n                      onSelectedItemsChange={(changes) =>\n                        handleSelectedItemsChange(changes.selectedItems)\n                      }\n                    />\n                  </Box>\n                )}\n              </ModalBody>\n\n              <ModalFooter bg=\"brandGray.dark\">\n                <Button\n                  onClick={onClose}\n                  fontSize={\"14px\"}\n                  mr={6}\n                  variant=\"link\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  background=\"highlight.standard\"\n                  color=\"white\"\n                  type=\"submit\"\n                  fontSize={\"14px\"}\n                  _hover={{ bg: \"highlight.hover\" }}\n                  _active={{ bg: \"highlight.active\" }}\n                  _focus={{ boxShadow: \"none\" }}\n                  isLoading={isSubmitting}\n                >\n                  Create Channel\n                </Button>\n              </ModalFooter>\n            </Form>\n          )}\n        </Formik>\n      </ModalContent>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}