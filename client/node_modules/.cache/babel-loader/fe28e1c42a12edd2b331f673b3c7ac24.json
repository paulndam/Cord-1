{"ast":null,"code":"import _objectSpread from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Flex,Icon,ListItem,Text,useDisclosure}from\"@chakra-ui/react\";import{FaHashtag,FaUserLock}from\"react-icons/fa\";import{MdSettings}from\"react-icons/md\";import{Link,useLocation}from\"react-router-dom\";import userStore from\"stores/userStore\";import ChannelSettingsModal from\"components/modals/ChannelSettingsModal\";import useGetCurrentGuild from\"hooks/useGetCurrentGuild\";import{ChannelNotificationIndicator}from\"components/shared/GuildPills\";import{useQueryClient}from\"react-query\";import{cKey}from\"utils/querykeys\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function ChannelListItem(_ref){var channel=_ref.channel,guildId=_ref.guildId;var currentPath=\"/channels/\".concat(guildId,\"/\").concat(channel.id);var location=useLocation();var isActive=location.pathname===currentPath;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showSettings=_useState2[0],setShowSettings=_useState2[1];var current=userStore(function(state){return state.current;});var guild=useGetCurrentGuild(guildId);var _useDisclosure=useDisclosure(),isOpen=_useDisclosure.isOpen,onOpen=_useDisclosure.onOpen,onClose=_useDisclosure.onClose;var cache=useQueryClient();useEffect(function(){if(channel.hasNotification&&isActive){cache.setQueryData(cKey(guildId),function(d){var index=d===null||d===void 0?void 0:d.findIndex(function(c){return c.id===channel.id;});if(index!==-1){d[index]=_objectSpread(_objectSpread({},d[index]),{},{hasNotification:false});}return d;});}});return/*#__PURE__*/_jsx(Link,{to:currentPath,children:/*#__PURE__*/_jsxs(ListItem,{p:\"5px\",m:\"0 10px\",color:isActive||channel.hasNotification?\"#fff\":\"brandGray.accent\",_hover:{bg:\"brandGray.light\",borderRadius:\"5px\",cursor:\"pointer\",color:\"#fff\"},bg:isActive?\"brandGray.active\":undefined,mb:\"2px\",onMouseLeave:function onMouseLeave(){return setShowSettings(false);},onMouseEnter:function onMouseEnter(){return setShowSettings(true);},children:[channel.hasNotification&&/*#__PURE__*/_jsx(ChannelNotificationIndicator,{}),/*#__PURE__*/_jsxs(Flex,{align:\"center\",justify:\"space-between\",children:[/*#__PURE__*/_jsxs(Flex,{align:\"center\",children:[/*#__PURE__*/_jsx(Icon,{as:channel.isPublic?FaHashtag:FaUserLock,color:\"brandGray.accent\"}),/*#__PURE__*/_jsx(Text,{ml:\"2\",children:channel.name})]}),(current===null||current===void 0?void 0:current.id)===(guild===null||guild===void 0?void 0:guild.ownerId)&&(showSettings||isOpen)&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Icon,{as:MdSettings,color:\"brandGray.accent\",fontSize:\"12px\",_hover:{color:\"#fff\"},onClick:function onClick(e){e.preventDefault();onOpen();}}),isOpen&&/*#__PURE__*/_jsx(ChannelSettingsModal,{guildId:guildId,channelId:channel.id,isOpen:isOpen,onClose:onClose})]})]})]})});}","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/components/items/ChannelListItem.js"],"names":["React","useEffect","useState","Flex","Icon","ListItem","Text","useDisclosure","FaHashtag","FaUserLock","MdSettings","Link","useLocation","userStore","ChannelSettingsModal","useGetCurrentGuild","ChannelNotificationIndicator","useQueryClient","cKey","ChannelListItem","channel","guildId","currentPath","id","location","isActive","pathname","showSettings","setShowSettings","current","state","guild","isOpen","onOpen","onClose","cache","hasNotification","setQueryData","d","index","findIndex","c","bg","borderRadius","cursor","color","undefined","isPublic","name","ownerId","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Flex, Icon, ListItem, Text, useDisclosure } from \"@chakra-ui/react\";\nimport { FaHashtag, FaUserLock } from \"react-icons/fa\";\nimport { MdSettings } from \"react-icons/md\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport userStore from \"stores/userStore\";\nimport ChannelSettingsModal from \"components/modals/ChannelSettingsModal\";\nimport useGetCurrentGuild from \"hooks/useGetCurrentGuild\";\nimport { ChannelNotificationIndicator } from \"components/shared/GuildPills\";\nimport { useQueryClient } from \"react-query\";\nimport { cKey } from \"utils/querykeys\";\n\nexport default function ChannelListItem({ channel, guildId }) {\n  const currentPath = `/channels/${guildId}/${channel.id}`;\n  const location = useLocation();\n  const isActive = location.pathname === currentPath;\n  const [showSettings, setShowSettings] = useState(false);\n\n  const current = userStore((state) => state.current);\n  const guild = useGetCurrentGuild(guildId);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const cache = useQueryClient();\n\n  useEffect(() => {\n    if (channel.hasNotification && isActive) {\n      cache.setQueryData(cKey(guildId), (d) => {\n        const index = d?.findIndex((c) => c.id === channel.id);\n        if (index !== -1) {\n          d[index] = { ...d[index], hasNotification: false };\n        }\n        return d;\n      });\n    }\n  });\n\n  return (\n    <Link to={currentPath}>\n      <ListItem\n        p=\"5px\"\n        m=\"0 10px\"\n        color={\n          isActive || channel.hasNotification ? \"#fff\" : \"brandGray.accent\"\n        }\n        _hover={{\n          bg: \"brandGray.light\",\n          borderRadius: \"5px\",\n          cursor: \"pointer\",\n          color: \"#fff\",\n        }}\n        bg={isActive ? \"brandGray.active\" : undefined}\n        mb=\"2px\"\n        onMouseLeave={() => setShowSettings(false)}\n        onMouseEnter={() => setShowSettings(true)}\n      >\n        {channel.hasNotification && <ChannelNotificationIndicator />}\n        <Flex align=\"center\" justify={\"space-between\"}>\n          <Flex align=\"center\">\n            <Icon\n              as={channel.isPublic ? FaHashtag : FaUserLock}\n              color={\"brandGray.accent\"}\n            />\n            <Text ml=\"2\">{channel.name}</Text>\n          </Flex>\n          {current?.id === guild?.ownerId && (showSettings || isOpen) && (\n            <>\n              <Icon\n                as={MdSettings}\n                color={\"brandGray.accent\"}\n                fontSize={\"12px\"}\n                _hover={{ color: \"#fff\" }}\n                onClick={(e) => {\n                  e.preventDefault();\n                  onOpen();\n                }}\n              />\n              {isOpen && (\n                <ChannelSettingsModal\n                  guildId={guildId}\n                  channelId={channel.id}\n                  isOpen={isOpen}\n                  onClose={onClose}\n                />\n              )}\n            </>\n          )}\n        </Flex>\n      </ListItem>\n    </Link>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}