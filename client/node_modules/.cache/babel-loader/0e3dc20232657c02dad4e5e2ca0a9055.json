{"ast":null,"code":"import _toConsumableArray from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{useEffect}from\"react\";import{useQueryClient}from\"react-query\";import getSocket from\"../getSocket\";export default function useMemberSocket(guildId,key){var cache=useQueryClient();useEffect(function(){var socket=getSocket();socket.emit(\"joinGuild\",guildId);socket.on(\"add_member\",function(newMember){cache.setQueryData(key,function(data){return[].concat(_toConsumableArray(data),[newMember]).sort(function(a,b){return a.username.localeCompare(b.username);});});});socket.on(\"remove_member\",function(memberId){cache.setQueryData(key,function(data){return _toConsumableArray(data===null||data===void 0?void 0:data.filter(function(m){return m.id!==memberId;}));});});socket.on(\"toggle_online\",function(memberId){cache.invalidateQueries(key);});// //setQueryData(key, (data) => {\n//   const index = data?.findIndex((m) => m.id === memberId);\n//   if (index !== -1) {\n//     data[index].isOnline = true;\n//   }\n//   return data;\n// });\nsocket.on(\"toggle_offline\",function(memberId){cache.setQueryData(key,function(data){var index=data===null||data===void 0?void 0:data.findIndex(function(m){return m.id===memberId;});if(index!==-1){data[index].isOnline=false;}return data;});});return function(){socket.emit(\"leaveRoom\",guildId);socket.disconnect();};},[key,cache,guildId]);}","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/api/ws/useMemberSocket.js"],"names":["useEffect","useQueryClient","getSocket","useMemberSocket","guildId","key","cache","socket","emit","on","newMember","setQueryData","data","sort","a","b","username","localeCompare","memberId","filter","m","id","invalidateQueries","index","findIndex","isOnline","disconnect"],"mappings":"4MAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,OAASC,cAAT,KAA+B,aAA/B,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CAEA,cAAe,SAASC,CAAAA,eAAT,CAAyBC,OAAzB,CAAkCC,GAAlC,CAAuC,CACpD,GAAMC,CAAAA,KAAK,CAAGL,cAAc,EAA5B,CAEAD,SAAS,CAAC,UAAM,CACd,GAAMO,CAAAA,MAAM,CAAGL,SAAS,EAAxB,CACAK,MAAM,CAACC,IAAP,CAAY,WAAZ,CAAyBJ,OAAzB,EACAG,MAAM,CAACE,EAAP,CAAU,YAAV,CAAwB,SAACC,SAAD,CAAe,CACrCJ,KAAK,CAACK,YAAN,CAAmBN,GAAnB,CAAwB,SAACO,IAAD,CAAU,CAChC,MAAO,6BAAIA,IAAJ,GAAUF,SAAV,GAAqBG,IAArB,CAA0B,SAACC,CAAD,CAAIC,CAAJ,QAC/BD,CAAAA,CAAC,CAACE,QAAF,CAAWC,aAAX,CAAyBF,CAAC,CAACC,QAA3B,CAD+B,EAA1B,CAAP,CAGD,CAJD,EAKD,CAND,EAQAT,MAAM,CAACE,EAAP,CAAU,eAAV,CAA2B,SAACS,QAAD,CAAc,CACvCZ,KAAK,CAACK,YAAN,CAAmBN,GAAnB,CAAwB,SAACO,IAAD,CAAU,CAChC,0BAAWA,IAAX,SAAWA,IAAX,iBAAWA,IAAI,CAAEO,MAAN,CAAa,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,EAAF,GAASH,QAAhB,EAAb,CAAX,EACD,CAFD,EAGD,CAJD,EAMAX,MAAM,CAACE,EAAP,CAAU,eAAV,CAA2B,SAACS,QAAD,CAAc,CACvCZ,KAAK,CAACgB,iBAAN,CAAwBjB,GAAxB,EACD,CAFD,EAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAE,MAAM,CAACE,EAAP,CAAU,gBAAV,CAA4B,SAACS,QAAD,CAAc,CACxCZ,KAAK,CAACK,YAAN,CAAmBN,GAAnB,CAAwB,SAACO,IAAD,CAAU,CAChC,GAAMW,CAAAA,KAAK,CAAGX,IAAH,SAAGA,IAAH,iBAAGA,IAAI,CAAEY,SAAN,CAAgB,SAACJ,CAAD,QAAOA,CAAAA,CAAC,CAACC,EAAF,GAASH,QAAhB,EAAhB,CAAd,CACA,GAAIK,KAAK,GAAK,CAAC,CAAf,CAAkB,CAChBX,IAAI,CAACW,KAAD,CAAJ,CAAYE,QAAZ,CAAuB,KAAvB,CACD,CACD,MAAOb,CAAAA,IAAP,CACD,CAND,EAOD,CARD,EAUA,MAAO,WAAM,CACXL,MAAM,CAACC,IAAP,CAAY,WAAZ,CAAyBJ,OAAzB,EACAG,MAAM,CAACmB,UAAP,GACD,CAHD,CAID,CA3CQ,CA2CN,CAACrB,GAAD,CAAMC,KAAN,CAAaF,OAAb,CA3CM,CAAT,CA4CD","sourcesContent":["import { useEffect } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport getSocket from \"../getSocket\";\n\nexport default function useMemberSocket(guildId, key) {\n  const cache = useQueryClient();\n\n  useEffect(() => {\n    const socket = getSocket();\n    socket.emit(\"joinGuild\", guildId);\n    socket.on(\"add_member\", (newMember) => {\n      cache.setQueryData(key, (data) => {\n        return [...data, newMember].sort((a, b) =>\n          a.username.localeCompare(b.username)\n        );\n      });\n    });\n\n    socket.on(\"remove_member\", (memberId) => {\n      cache.setQueryData(key, (data) => {\n        return [...data?.filter((m) => m.id !== memberId)];\n      });\n    });\n\n    socket.on(\"toggle_online\", (memberId) => {\n      cache.invalidateQueries(key);\n    });\n\n    // //setQueryData(key, (data) => {\n    //   const index = data?.findIndex((m) => m.id === memberId);\n    //   if (index !== -1) {\n    //     data[index].isOnline = true;\n    //   }\n    //   return data;\n    // });\n\n    socket.on(\"toggle_offline\", (memberId) => {\n      cache.setQueryData(key, (data) => {\n        const index = data?.findIndex((m) => m.id === memberId);\n        if (index !== -1) {\n          data[index].isOnline = false;\n        }\n        return data;\n      });\n    });\n\n    return () => {\n      socket.emit(\"leaveRoom\", guildId);\n      socket.disconnect();\n    };\n  }, [key, cache, guildId]);\n}\n"]},"metadata":{},"sourceType":"module"}