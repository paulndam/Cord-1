{"ast":null,"code":"var _jsxFileName = \"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/components/layouts/guild/chat/ChatScreen.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Flex, Spinner } from \"@chakra-ui/react\";\nimport { LastPage } from \"@material-ui/icons\";\nimport { getMessages } from \"api/handler/messages\";\nimport useMessageSocket from \"api/ws/useMessageSocket\";\nimport Message from \"components/items/message/Message\";\nimport DateDivider from \"components/sections/DateDivider\";\nimport StartMessages from \"components/sections/StartMessages\";\nimport React, { useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { checkNewDay, getTimeDifference } from \"utils/dateUtils\";\nimport guildScrollbarCss from \"../css/GuildScrollerCSS\";\nimport ChatGrid from \"./ChatGrid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatScreen() {\n  _s();\n\n  const {\n    channelId\n  } = useParams();\n  const [hasMore, setHasMore] = useState(true);\n  const qKey = `messages-${channelId}`;\n  const {\n    data,\n    isLoading,\n    fetchNextPage\n  } = useInfiniteQuery(qKey, async ({\n    pageParam = null\n  }) => {\n    const {\n      data\n    } = await getMessages(channelId, pageParam);\n\n    if (data.length !== 35) {\n      setHasMore(false);\n      return data;\n    }\n  }, {\n    getNextPageParam: LastPage => hasMore && LastPage.length ? LastPage[LastPage.length - 1].createdAt : \"\"\n  });\n  useMessageSocket(channelId, qKey);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(ChatGrid, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        align: \"center\",\n        justify: \"center\",\n        h: \"full\",\n        children: /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          thickness: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n  const checkIfWithinTime = (message1, message2) => {\n    if (message1.user.id !== message2.user.id) return false;\n    if (message1.createdAt === message2.createdAt) return false;\n    return getTimeDifference(message1.createdAt, message2.createdAt) <= 5;\n  };\n\n  const messages = data ? data.pages.flatMap(p => p) : [];\n  return /*#__PURE__*/_jsxDEV(ChatGrid, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      h: \"10px\",\n      mt: 4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      as: InfiniteScroll,\n      css: guildScrollbarCss,\n      dataLength: messages.length,\n      next: fetchNextPage,\n      style: {\n        display: \"flex\",\n        flexDirection: \"column-reverse\"\n      },\n      inverse: true,\n      hasMore: hasMore,\n      loader: messages.length > 0 && /*#__PURE__*/_jsxDEV(Flex, {\n        align: \"center\",\n        justify: \"center\",\n        h: \"50px\",\n        children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this),\n      scrollableTarget: \"chatGrid\",\n      children: messages.map((m, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Message, {\n          message: m,\n          isCompact: checkIfWithinTime(m, messages[Math.min(i + 1, messages.length - 1)])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), checkNewDay(m.createdAt, messages[Math.min(i + 1, messages.length - 1)].createdAt) && /*#__PURE__*/_jsxDEV(DateDivider, {\n          date: m.createdAt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 18\n        }, this)]\n      }, m.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), !hasMore && /*#__PURE__*/_jsxDEV(StartMessages, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatScreen, \"Im4W34yjT8F2Vx5033Pxmvy26BQ=\", false, function () {\n  return [useParams, useInfiniteQuery, useMessageSocket];\n});\n\n_c = ChatScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/components/layouts/guild/chat/ChatScreen.js"],"names":["Box","Flex","Spinner","LastPage","getMessages","useMessageSocket","Message","DateDivider","StartMessages","React","useState","InfiniteScroll","useInfiniteQuery","useParams","checkNewDay","getTimeDifference","guildScrollbarCss","ChatGrid","ChatScreen","channelId","hasMore","setHasMore","qKey","data","isLoading","fetchNextPage","pageParam","length","getNextPageParam","createdAt","checkIfWithinTime","message1","message2","user","id","messages","pages","flatMap","p","display","flexDirection","map","m","i","Math","min"],"mappings":"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","sourcesContent":["import { Box, Flex, Spinner } from \"@chakra-ui/react\";\nimport { LastPage } from \"@material-ui/icons\";\nimport { getMessages } from \"api/handler/messages\";\nimport useMessageSocket from \"api/ws/useMessageSocket\";\nimport Message from \"components/items/message/Message\";\nimport DateDivider from \"components/sections/DateDivider\";\nimport StartMessages from \"components/sections/StartMessages\";\nimport React, { useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { checkNewDay, getTimeDifference } from \"utils/dateUtils\";\nimport guildScrollbarCss from \"../css/GuildScrollerCSS\";\nimport ChatGrid from \"./ChatGrid\";\n\nexport default function ChatScreen() {\n  const { channelId } = useParams();\n  const [hasMore, setHasMore] = useState(true);\n  const qKey = `messages-${channelId}`;\n\n  const { data, isLoading, fetchNextPage } = useInfiniteQuery(\n    qKey,\n    async ({ pageParam = null }) => {\n      const { data } = await getMessages(channelId, pageParam);\n      if (data.length !== 35) {\n        setHasMore(false);\n        return data;\n      }\n    },\n    {\n      getNextPageParam: (LastPage) =>\n        hasMore && LastPage.length\n          ? LastPage[LastPage.length - 1].createdAt\n          : \"\",\n    }\n  );\n\n  useMessageSocket(channelId, qKey);\n\n  if (isLoading) {\n    return (\n      <ChatGrid>\n        <Flex align={\"center\"} justify={\"center\"} h={\"full\"}>\n          <Spinner size={\"xl\"} thickness={\"4px\"} />\n        </Flex>\n      </ChatGrid>\n    );\n  }\n\n  const checkIfWithinTime = (message1, message2) => {\n    if (message1.user.id !== message2.user.id) return false;\n    if (message1.createdAt === message2.createdAt) return false;\n    return getTimeDifference(message1.createdAt, message2.createdAt) <= 5;\n  };\n\n  const messages = data ? data.pages.flatMap((p) => p) : [];\n\n  return (\n    <ChatGrid>\n      <Box h={\"10px\"} mt={4} />\n      <Box\n        as={InfiniteScroll}\n        css={guildScrollbarCss}\n        dataLength={messages.length}\n        next={fetchNextPage}\n        style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n        inverse={true}\n        hasMore={hasMore}\n        loader={\n          messages.length > 0 && (\n            <Flex align={\"center\"} justify={\"center\"} h={\"50px\"}>\n              <Spinner />\n            </Flex>\n          )\n        }\n        scrollableTarget=\"chatGrid\"\n      >\n        {messages.map((m, i) => (\n          <React.Fragment key={m.id}>\n            <Message\n              message={m}\n              isCompact={checkIfWithinTime(\n                m,\n                messages[Math.min(i + 1, messages.length - 1)]\n              )}\n            />\n            {checkNewDay(\n              m.createdAt,\n              messages[Math.min(i + 1, messages.length - 1)].createdAt\n            ) && <DateDivider date={m.createdAt} />}\n          </React.Fragment>\n        ))}\n      </Box>\n      {!hasMore && <StartMessages />}\n    </ChatGrid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}