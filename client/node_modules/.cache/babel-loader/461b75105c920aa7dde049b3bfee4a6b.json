{"ast":null,"code":"import _regeneratorRuntime from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Box,Flex,Spinner}from\"@chakra-ui/react\";import{LastPage}from\"@material-ui/icons\";import{getMessages}from\"api/handler/messages\";import useMessageSocket from\"api/ws/useMessageSocket\";import Message from\"components/items/message/Message\";import DateDivider from\"components/sections/DateDivider\";import StartMessages from\"components/sections/StartMessages\";import React,{useState}from\"react\";import InfiniteScroll from\"react-infinite-scroll-component\";import{useInfiniteQuery}from\"react-query\";import{useParams}from\"react-router-dom\";import{checkNewDay,getTimeDifference}from\"utils/dateUtils\";import guildScrollbarCss from\"../css/GuildScrollerCSS\";import ChatGrid from\"./ChatGrid\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ChatScreen(){var _useParams=useParams(),channelId=_useParams.channelId;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),hasMore=_useState2[0],setHasMore=_useState2[1];var qKey=\"messages-\".concat(channelId);var _useInfiniteQuery=useInfiniteQuery(qKey,/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref){var _ref$pageParam,pageParam,_yield$getMessages,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref$pageParam=_ref.pageParam,pageParam=_ref$pageParam===void 0?null:_ref$pageParam;_context.next=3;return getMessages(channelId,pageParam);case 3:_yield$getMessages=_context.sent;data=_yield$getMessages.data;if(!(data.length!==35)){_context.next=8;break;}setHasMore(false);return _context.abrupt(\"return\",data);case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}(),{getNextPageParam:function getNextPageParam(LastPage){return hasMore&&LastPage.length?LastPage[LastPage.length-1].createdAt:\"\";}}),data=_useInfiniteQuery.data,isLoading=_useInfiniteQuery.isLoading,fetchNextPage=_useInfiniteQuery.fetchNextPage;useMessageSocket(channelId,qKey);if(isLoading){return/*#__PURE__*/_jsx(ChatGrid,{children:/*#__PURE__*/_jsx(Flex,{align:\"center\",justify:\"center\",h:\"full\",children:/*#__PURE__*/_jsx(Spinner,{size:\"xl\",thickness:\"4px\"})})});}var checkIfWithinTime=function checkIfWithinTime(message1,message2){if(message1.user.id!==message2.user.id)return false;if(message1.createdAt===message2.createdAt)return false;return getTimeDifference(message1.createdAt,message2.createdAt)<=5;};var messages=data?data.pages.flatMap(function(p){return p;}):[];return/*#__PURE__*/_jsxs(ChatGrid,{children:[/*#__PURE__*/_jsx(Box,{h:\"10px\",mt:4}),/*#__PURE__*/_jsx(Box,{as:InfiniteScroll,css:guildScrollbarCss,dataLength:messages.length,next:fetchNextPage,style:{display:\"flex\",flexDirection:\"column-reverse\"},inverse:true,hasMore:hasMore,loader:messages.length>0&&/*#__PURE__*/_jsx(Flex,{align:\"center\",justify:\"center\",h:\"50px\",children:/*#__PURE__*/_jsx(Spinner,{})}),scrollableTarget:\"chatGrid\",children:messages.map(function(m,i){return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(Message,{message:m,isCompact:checkIfWithinTime(m,messages[Math.min(i+1,messages.length-1)])}),checkNewDay(m.createdAt,messages[Math.min(i+1,messages.length-1)].createdAt)&&/*#__PURE__*/_jsx(DateDivider,{date:m.createdAt})]},m.id);})}),!hasMore&&/*#__PURE__*/_jsx(StartMessages,{})]});}","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/components/layouts/guild/chat/ChatScreen.js"],"names":["Box","Flex","Spinner","LastPage","getMessages","useMessageSocket","Message","DateDivider","StartMessages","React","useState","InfiniteScroll","useInfiniteQuery","useParams","checkNewDay","getTimeDifference","guildScrollbarCss","ChatGrid","ChatScreen","channelId","hasMore","setHasMore","qKey","pageParam","data","length","getNextPageParam","createdAt","isLoading","fetchNextPage","checkIfWithinTime","message1","message2","user","id","messages","pages","flatMap","p","display","flexDirection","map","m","i","Math","min"],"mappings":"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","sourcesContent":["import { Box, Flex, Spinner } from \"@chakra-ui/react\";\nimport { LastPage } from \"@material-ui/icons\";\nimport { getMessages } from \"api/handler/messages\";\nimport useMessageSocket from \"api/ws/useMessageSocket\";\nimport Message from \"components/items/message/Message\";\nimport DateDivider from \"components/sections/DateDivider\";\nimport StartMessages from \"components/sections/StartMessages\";\nimport React, { useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { checkNewDay, getTimeDifference } from \"utils/dateUtils\";\nimport guildScrollbarCss from \"../css/GuildScrollerCSS\";\nimport ChatGrid from \"./ChatGrid\";\n\nexport default function ChatScreen() {\n  const { channelId } = useParams();\n  const [hasMore, setHasMore] = useState(true);\n  const qKey = `messages-${channelId}`;\n\n  const { data, isLoading, fetchNextPage } = useInfiniteQuery(\n    qKey,\n    async ({ pageParam = null }) => {\n      const { data } = await getMessages(channelId, pageParam);\n      if (data.length !== 35) {\n        setHasMore(false);\n        return data;\n      }\n    },\n    {\n      getNextPageParam: (LastPage) =>\n        hasMore && LastPage.length\n          ? LastPage[LastPage.length - 1].createdAt\n          : \"\",\n    }\n  );\n\n  useMessageSocket(channelId, qKey);\n\n  if (isLoading) {\n    return (\n      <ChatGrid>\n        <Flex align={\"center\"} justify={\"center\"} h={\"full\"}>\n          <Spinner size={\"xl\"} thickness={\"4px\"} />\n        </Flex>\n      </ChatGrid>\n    );\n  }\n\n  const checkIfWithinTime = (message1, message2) => {\n    if (message1.user.id !== message2.user.id) return false;\n    if (message1.createdAt === message2.createdAt) return false;\n    return getTimeDifference(message1.createdAt, message2.createdAt) <= 5;\n  };\n\n  const messages = data ? data.pages.flatMap((p) => p) : [];\n\n  return (\n    <ChatGrid>\n      <Box h={\"10px\"} mt={4} />\n      <Box\n        as={InfiniteScroll}\n        css={guildScrollbarCss}\n        dataLength={messages.length}\n        next={fetchNextPage}\n        style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n        inverse={true}\n        hasMore={hasMore}\n        loader={\n          messages.length > 0 && (\n            <Flex align={\"center\"} justify={\"center\"} h={\"50px\"}>\n              <Spinner />\n            </Flex>\n          )\n        }\n        scrollableTarget=\"chatGrid\"\n      >\n        {messages.map((m, i) => (\n          <React.Fragment key={m.id}>\n            <Message\n              message={m}\n              isCompact={checkIfWithinTime(\n                m,\n                messages[Math.min(i + 1, messages.length - 1)]\n              )}\n            />\n            {checkNewDay(\n              m.createdAt,\n              messages[Math.min(i + 1, messages.length - 1)].createdAt\n            ) && <DateDivider date={m.createdAt} />}\n          </React.Fragment>\n        ))}\n      </Box>\n      {!hasMore && <StartMessages />}\n    </ChatGrid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}