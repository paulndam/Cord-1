{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport channelStore from \"stores/channelStore\";\nimport userStore from \"stores/userStore\";\nimport getSocket from \"../getSocket\";\nexport default function useMessageSocket(channelId, key) {\n  _s();\n\n  const current = userStore(state => state.current);\n  const store = channelStore();\n  const cache = useQueryClient();\n  useEffect(() => {\n    store.reset();\n    const socket = getSocket();\n    socket.emit(\"joinChannel\", channelId);\n    socket.on(\"new_message\", newMessage => {\n      cache.setQueryData(key, d => {\n        d === null || d === void 0 ? void 0 : d.pages[0].unshift(newMessage);\n        return d;\n      });\n    });\n    socket.on(\"edit_message\", editMessage => {\n      cache.setQueryData(key, d => {\n        let index = -1;\n        let editId = -1;\n        d === null || d === void 0 ? void 0 : d.pages.forEach((p, i) => {\n          editId = p.findIndex(m => m.id === editMessage.id);\n          if (editId !== -1) index = i;\n        });\n\n        if (index !== -1 && editId !== -1) {\n          d.pages[index][editId] = editMessage;\n        }\n\n        return d;\n      });\n    });\n    socket.on(\"delete_message\", toBeRemoved => {\n      cache.setQueryData(key, d => {\n        let index = -1;\n        d === null || d === void 0 ? void 0 : d.pages.forEach((p, i) => {\n          if (p.findIndex(m => m.id === toBeRemoved.id) !== -1) index = i;\n        });\n\n        if (index !== -1) {\n          d.pages[index] = d === null || d === void 0 ? void 0 : d.pages[index].filter(m => m.id !== toBeRemoved.id);\n        }\n\n        return d;\n      });\n    });\n    socket.on(\"addToTyping\", username => {\n      if (username !== (current === null || current === void 0 ? void 0 : current.username)) {\n        store.addTyping(username);\n      }\n    });\n    socket.on(\"removeFromTyping\", username => {\n      if (username !== (current === null || current === void 0 ? void 0 : current.username)) {\n        store.removeTyping(username);\n      }\n    });\n    return () => {\n      socket.emit(\"leaveRoom\", channelId);\n      socket.disconnect();\n    }; // eslint-disable-next-line\n  }, [channelId, cache, key, current]);\n}\n\n_s(useMessageSocket, \"yKPUtBryQjcykj4wN076+QCSH/g=\", false, function () {\n  return [useQueryClient];\n});","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/api/ws/useMessageSocket.js"],"names":["useEffect","useQueryClient","channelStore","userStore","getSocket","useMessageSocket","channelId","key","current","state","store","cache","reset","socket","emit","on","newMessage","setQueryData","d","pages","unshift","editMessage","index","editId","forEach","p","i","findIndex","m","id","toBeRemoved","filter","username","addTyping","removeTyping","disconnect"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport channelStore from \"stores/channelStore\";\nimport userStore from \"stores/userStore\";\nimport getSocket from \"../getSocket\";\n\nexport default function useMessageSocket(channelId, key) {\n  const current = userStore((state) => state.current);\n  const store = channelStore();\n  const cache = useQueryClient();\n\n  useEffect(() => {\n    store.reset();\n    const socket = getSocket();\n    socket.emit(\"joinChannel\", channelId);\n\n    socket.on(\"new_message\", (newMessage) => {\n      cache.setQueryData(key, (d) => {\n        d?.pages[0].unshift(newMessage);\n        return d;\n      });\n    });\n\n    socket.on(\"edit_message\", (editMessage) => {\n      cache.setQueryData(key, (d) => {\n        let index = -1;\n        let editId = -1;\n        d?.pages.forEach((p, i) => {\n          editId = p.findIndex((m) => m.id === editMessage.id);\n          if (editId !== -1) index = i;\n        });\n\n        if (index !== -1 && editId !== -1) {\n          d.pages[index][editId] = editMessage;\n        }\n        return d;\n      });\n    });\n\n    socket.on(\"delete_message\", (toBeRemoved) => {\n      cache.setQueryData(key, (d) => {\n        let index = -1;\n        d?.pages.forEach((p, i) => {\n          if (p.findIndex((m) => m.id === toBeRemoved.id) !== -1) index = i;\n        });\n        if (index !== -1) {\n          d.pages[index] = d?.pages[index].filter(\n            (m) => m.id !== toBeRemoved.id\n          );\n        }\n        return d;\n      });\n    });\n\n    socket.on(\"addToTyping\", (username) => {\n      if (username !== current?.username) {\n        store.addTyping(username);\n      }\n    });\n\n    socket.on(\"removeFromTyping\", (username) => {\n      if (username !== current?.username) {\n        store.removeTyping(username);\n      }\n    });\n\n    return () => {\n      socket.emit(\"leaveRoom\", channelId);\n      socket.disconnect();\n    };\n    // eslint-disable-next-line\n  }, [channelId, cache, key, current]);\n}\n"]},"metadata":{},"sourceType":"module"}