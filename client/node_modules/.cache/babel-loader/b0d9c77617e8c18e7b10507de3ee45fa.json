{"ast":null,"code":"import _toConsumableArray from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{useEffect}from\"react\";import{useQueryClient}from\"react-query\";import homeStore from\"stores/homeStore\";import userStore from\"stores/userStore\";import{fKey}from\"utils/querykeys\";import getSocket from\"../getSocket\";export default function useFriendSocket(){var current=userStore(function(state){return state.current;});var setRequests=homeStore(function(state){return state.setRequests;});var cache=useQueryClient();useEffect(function(){var socket=getSocket();socket.emit(\"joinUser\",current===null||current===void 0?void 0:current.id);socket.emit(\"getRequestCount\");socket.on(\"add_friend\",function(newFriend){cache.setQueryData(fKey,function(data){return[].concat(_toConsumableArray(data),[newFriend]).sort(function(a,b){return a.username.localeCompare(b.username);});});});socket.on(\"remove_friend\",function(memberId){cache.setQueryData(fKey,function(data){return _toConsumableArray(data===null||data===void 0?void 0:data.filter(function(m){return m.id!==memberId;}));});});socket.on(\"toggle_online\",function(memberId){cache.setQueryData(fKey,function(data){var index=data===null||data===void 0?void 0:data.findIndex(function(m){return m.id===memberId;});if(index!==-1){data[index].isOnline=true;}return data;});});socket.on(\"toggle_offline\",function(memberId){cache.setQueryData(fKey,function(data){var index=data===null||data===void 0?void 0:data.findIndex(function(m){return m.id===memberId;});if(index!==-1){data[index].isOnline=false;}return data;});});socket.on(\"requestCount\",function(count){setRequests(count);});return function(){socket.emit(\"leaveRoom\",current===null||current===void 0?void 0:current.id);socket.disconnect();};},[cache,current,setRequests]);}","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/api/ws/useFriendSocket.js"],"names":["useEffect","useQueryClient","homeStore","userStore","fKey","getSocket","useFriendSocket","current","state","setRequests","cache","socket","emit","id","on","newFriend","setQueryData","data","sort","a","b","username","localeCompare","memberId","filter","m","index","findIndex","isOnline","count","disconnect"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport homeStore from \"stores/homeStore\";\nimport userStore from \"stores/userStore\";\nimport { fKey } from \"utils/querykeys\";\nimport getSocket from \"../getSocket\";\n\nexport default function useFriendSocket() {\n  const current = userStore((state) => state.current);\n  const setRequests = homeStore((state) => state.setRequests);\n  const cache = useQueryClient();\n\n  useEffect(() => {\n    const socket = getSocket();\n    socket.emit(\"joinUser\", current?.id);\n    socket.emit(\"getRequestCount\");\n    socket.on(\"add_friend\", (newFriend) => {\n      cache.setQueryData(fKey, (data) => {\n        return [...data, newFriend].sort((a, b) =>\n          a.username.localeCompare(b.username)\n        );\n      });\n    });\n\n    socket.on(\"remove_friend\", (memberId) => {\n      cache.setQueryData(fKey, (data) => {\n        return [...data?.filter((m) => m.id !== memberId)];\n      });\n    });\n\n    socket.on(\"toggle_online\", (memberId) => {\n      cache.setQueryData(fKey, (data) => {\n        const index = data?.findIndex((m) => m.id === memberId);\n        if (index !== -1) {\n          data[index].isOnline = true;\n        }\n        return data;\n      });\n    });\n\n    socket.on(\"toggle_offline\", (memberId) => {\n      cache.setQueryData(fKey, (data) => {\n        const index = data?.findIndex((m) => m.id === memberId);\n        if (index !== -1) {\n          data[index].isOnline = false;\n        }\n        return data;\n      });\n    });\n\n    socket.on(\"requestCount\", (count) => {\n      setRequests(count);\n    });\n\n    return () => {\n      socket.emit(\"leaveRoom\", current?.id);\n      socket.disconnect();\n    };\n  }, [cache, current, setRequests]);\n}\n"]},"metadata":{},"sourceType":"module"}