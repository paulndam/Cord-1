{"ast":null,"code":"import _regeneratorRuntime from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Box,Button,Flex,Heading,Image,Link,Text}from\"@chakra-ui/react\";import{resetPassword}from\"api/handler/auth\";import{Form,Formik}from\"formik\";import React,{useState}from\"react\";import{Link as RLink,useHistory,useParams}from\"react-router-dom\";import userStore from\"stores/userStore\";import toErrorMap from\"utils/toErrorMap\";import InputField from\"components/shared/InputField\";import{ResetPasswordSchema}from\"validation/auth.schema\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ResetPassword(){var _useParams=useParams(),token=_useParams.token;var setUser=userStore(function(state){return state.setUser;});var history=useHistory();var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),tokenError=_useState2[0],setTokenError=_useState2[1];var handleSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(values,_ref){var setErrors,_yield$resetPassword,data,errorMap;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setErrors=_ref.setErrors;_context.prev=1;_context.next=4;return resetPassword(_objectSpread(_objectSpread({},values),{},{token:token}));case 4:_yield$resetPassword=_context.sent;data=_yield$resetPassword.data;if(data){setUser(data);history.push(\"/channels/me\");}_context.next=15;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](1);console.log(_context.t0);errorMap=toErrorMap(_context.t0);if(errorMap){setTokenError(errorMap.token);}setErrors(errorMap);case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,9]]);}));return function handleSubmit(_x,_x2){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsx(Flex,{minHeight:\"100vh\",width:\"full\",align:\"center\",justifyContent:\"center\",children:/*#__PURE__*/_jsxs(Box,{px:4,width:\"full\",maxWidth:\"500px\",textAlign:\"center\",children:[/*#__PURE__*/_jsx(Flex,{mb:\"4\",justify:\"center\",children:/*#__PURE__*/_jsx(Image,{src:\"/logo.png\",w:\"80px\"})}),/*#__PURE__*/_jsxs(Box,{p:4,borderRadius:4,background:\"brandGray.light\",children:[/*#__PURE__*/_jsx(Box,{textAlign:\"center\",children:/*#__PURE__*/_jsx(Heading,{fontSize:\"24px\",children:\"Reset Password\"})}),/*#__PURE__*/_jsxs(Box,{my:4,textAlign:\"left\",children:[/*#__PURE__*/_jsx(Formik,{initialValues:{newPassword:\"\",confirmNewPassword:\"\"},validationSchema:ResetPasswordSchema,onSubmit:handleSubmit,children:function children(_ref3){var isSubmitting=_ref3.isSubmitting;return/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(InputField,{label:\"New Password\",name:\"newPassword\",autoComplete:\"new-password\",type:\"password\"}),/*#__PURE__*/_jsx(InputField,{label:\"Confirm New Password\",name:\"confirmNewPassword\",type:\"password\"}),/*#__PURE__*/_jsx(Button,{background:\"highlight.standard\",color:\"white\",width:\"full\",mt:4,type:\"submit\",isLoading:isSubmitting,_hover:{bg:\"highlight.hover\"},_active:{bg:\"highlight.active\"},_focus:{boxShadow:\"none\"},children:\"Reset Password\"})]});}}),tokenError?/*#__PURE__*/_jsxs(Flex,{direction:\"column\",mt:\"4\",justify:\"center\",align:\"center\",children:[/*#__PURE__*/_jsx(Text,{children:\"Invalid or expired token.\"}),/*#__PURE__*/_jsx(Link,{as:RLink,to:\"/forgot-password\",color:\"red\",children:\"Click here to get a new token\"})]}):null]})]})]})});}","map":{"version":3,"sources":["/Users/paulndam/Documents/MERN/React-Course/Crash-Course/build-discord/client/src/pages/ResetPassword.js"],"names":["Box","Button","Flex","Heading","Image","Link","Text","resetPassword","Form","Formik","React","useState","RLink","useHistory","useParams","userStore","toErrorMap","InputField","ResetPasswordSchema","ResetPassword","token","setUser","state","history","tokenError","setTokenError","handleSubmit","values","setErrors","data","push","console","log","errorMap","newPassword","confirmNewPassword","isSubmitting","bg","boxShadow"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  Image,\n  Link,\n  Text,\n} from \"@chakra-ui/react\";\nimport { resetPassword } from \"api/handler/auth\";\nimport { Form, Formik } from \"formik\";\nimport React, { useState } from \"react\";\nimport { Link as RLink, useHistory, useParams } from \"react-router-dom\";\nimport userStore from \"stores/userStore\";\nimport toErrorMap from \"utils/toErrorMap\";\nimport InputField from \"components/shared/InputField\";\nimport { ResetPasswordSchema } from \"validation/auth.schema\";\n\nexport default function ResetPassword() {\n  const { token } = useParams();\n  const setUser = userStore((state) => state.setUser);\n  const history = useHistory();\n  const [tokenError, setTokenError] = useState(\"\");\n\n  const handleSubmit = async (values, { setErrors }) => {\n    try {\n      const { data } = await resetPassword({ ...values, token });\n\n      if (data) {\n        setUser(data);\n        history.push(\"/channels/me\");\n      }\n    } catch (error) {\n      console.log(error);\n      const errorMap = toErrorMap(error);\n      if (errorMap) {\n        setTokenError(errorMap.token);\n      }\n      setErrors(errorMap);\n    }\n  };\n\n  return (\n    <Flex minHeight=\"100vh\" width=\"full\" align=\"center\" justifyContent=\"center\">\n      <Box px={4} width=\"full\" maxWidth=\"500px\" textAlign=\"center\">\n        <Flex mb=\"4\" justify=\"center\">\n          <Image src=\"/logo.png\" w=\"80px\" />\n        </Flex>\n        <Box p={4} borderRadius={4} background=\"brandGray.light\">\n          <Box textAlign=\"center\">\n            <Heading fontSize=\"24px\">Reset Password</Heading>\n          </Box>\n          <Box my={4} textAlign=\"left\">\n            <Formik\n              initialValues={{ newPassword: \"\", confirmNewPassword: \"\" }}\n              validationSchema={ResetPasswordSchema}\n              onSubmit={handleSubmit}\n            >\n              {({ isSubmitting }) => (\n                <Form>\n                  <InputField\n                    label=\"New Password\"\n                    name=\"newPassword\"\n                    autoComplete=\"new-password\"\n                    type=\"password\"\n                  />\n\n                  <InputField\n                    label=\"Confirm New Password\"\n                    name=\"confirmNewPassword\"\n                    type=\"password\"\n                  />\n\n                  <Button\n                    background=\"highlight.standard\"\n                    color=\"white\"\n                    width=\"full\"\n                    mt={4}\n                    type=\"submit\"\n                    isLoading={isSubmitting}\n                    _hover={{ bg: \"highlight.hover\" }}\n                    _active={{ bg: \"highlight.active\" }}\n                    _focus={{ boxShadow: \"none\" }}\n                  >\n                    Reset Password\n                  </Button>\n                </Form>\n              )}\n            </Formik>\n            {tokenError ? (\n              <Flex direction=\"column\" mt=\"4\" justify=\"center\" align=\"center\">\n                <Text>Invalid or expired token.</Text>\n                <Link as={RLink} to=\"/forgot-password\" color=\"red\">\n                  Click here to get a new token\n                </Link>\n              </Flex>\n            ) : null}\n          </Box>\n        </Box>\n      </Box>\n    </Flex>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}